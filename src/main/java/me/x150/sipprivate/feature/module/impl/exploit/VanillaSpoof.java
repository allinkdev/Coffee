/*
 * This file is part of the atomic client distribution.
 * Copyright (c) 2021-2021 0x150.
 */

package me.x150.sipprivate.feature.module.impl.exploit;

import io.netty.buffer.Unpooled;
import me.x150.sipprivate.feature.module.Module;
import me.x150.sipprivate.feature.module.ModuleType;
import me.x150.sipprivate.helper.event.EventType;
import me.x150.sipprivate.helper.event.Events;
import me.x150.sipprivate.helper.event.events.PacketEvent;
import me.x150.sipprivate.mixin.ICustomPayloadC2SPacketAccessor;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.PacketByteBuf;
import net.minecraft.network.packet.c2s.play.CustomPayloadC2SPacket;

import java.nio.charset.StandardCharsets;

public class VanillaSpoof extends Module {

    //    final BooleanValue spoofOther      = (BooleanValue) config.create("Spoof other", false).description("Tell the server you're using a non-existent client brand");
    //    final MultiValue   spoofOtherEntry = (MultiValue) config.create("Other:", "Atomic", "Femboyhook", "WURST", "Astolfo", "FartHook", "Atomic").description("why my tip sticky");

    public VanillaSpoof() {
        super("VanillaSpoof", "Tells the server you're on vanilla", ModuleType.EXPLOIT);
        Events.registerEventHandler(EventType.PACKET_SEND, event1 -> {
            if (!this.isEnabled()) {
                return;
            }
            PacketEvent event = (PacketEvent) event1;
            if (event.getPacket() instanceof CustomPayloadC2SPacket packet) {
                ICustomPayloadC2SPacketAccessor accessor = (ICustomPayloadC2SPacketAccessor) packet;
                if (accessor.getChannel().equals(CustomPayloadC2SPacket.BRAND)) {
                    accessor.setData(new PacketByteBuf(Unpooled.buffer()).writeString("vanilla"));
                } else if (accessor.getData().toString(StandardCharsets.UTF_8).toLowerCase().contains("fabric")) {
                    event.setCancelled(true);
                }
            }
        });
    }

    @Override
    public void tick() {

    }

    @Override
    public void enable() {

    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        return null;
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {

    }

    @Override
    public void onHudRender() {

    }
}

